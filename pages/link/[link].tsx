import { Input, Notification, PasswordInput, Text } from "@mantine/core";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { useRouter } from "next/router";
import { showNotification } from "@mantine/notifications";
import { supabase } from "../../lib/supabase";
import { XMarkIcon } from "@heroicons/react/24/outline";
type Props = {
  id: number;
  link: string;
  protected: boolean;
};
//@ts-ignore

const NewPage: NextPage = (props: Props) => {
  const [password, setPassword] = useState<string>("");
  const router = useRouter();

  const verifyPassword = async () => {
    const res = await fetch("/api/link/verify", {
      method: "POST",
      body: JSON.stringify({
        id: props.id,
        password,
      }),
    });
    const data = await res.json();
    if (data.message === "Successfull" && res.status === 200) {
      router.push(props.link);
    } else {
      showNotification({
        title: "Incorrect Password",
        message: "The password you entered is incorrect",
        color: "red",
        icon: <XMarkIcon />,
      });
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="flex justify-center items-center h-screen ">
        <div className="border-2 border-black p-6 rounded-md shadow-md flex flex-col space-y-4">
          <h1 className="text-4xl">Enter the password</h1>
          <PasswordInput
            placeholder="Password"
            value={password}
            onChange={(event) => setPassword(event.currentTarget.value)}
          />
          <button
            className="bg-black text-white font-semibold py-[12px] active:scale-95 transition-all duration-200 ease-out hover:opacity-80 rounded-md"
            onClick={verifyPassword}
          >
            Verify Password
          </button>
        </div>
      </div>
    </div>
  );
};

export default NewPage;
export async function getServerSideProps(context: any) {
  const shortenedLink = context?.params?.link;

  const { data } = await supabase
    .from("links")
    .select("*")
    .eq("shortened_link", shortenedLink);
  if (data?.length === 0) {
    return {
      redirect: {
        destination: "/new",
      },
    };
  }
  //@ts-ignore

  const link = data[0];

  if (link.protected) {
    return {
      props: {
        id: link.id,
        protected: true,
        link: link.link,
      },
    };
  }

  return {
    redirect: {
      destination: link.link,
    },
  };
}
