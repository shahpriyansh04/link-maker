import {
  ActionIcon,
  Box,
  Button,
  Center,
  Container,
  CopyButton,
  Input,
  Modal,
  PasswordInput,
  Stack,
  Switch,
  Text,
  Transition,
} from "@mantine/core";
import type { NextPage } from "next";
import { useClipboard, useToggle } from "@mantine/hooks";
import Head from "next/head";
import { useForm } from "@mantine/form";
import { useState } from "react";
import { ClipboardDocumentCheckIcon } from "@heroicons/react/24/outline";
import Link from "next/link";

interface LinkProps {
  link: string;
  passwordRequired: boolean;
  password?: string;
  confirmPassword?: string;
}

const LinkPage: NextPage = () => {
  const [checked, toggle] = useToggle([false, true] as const);
  const [link, setLink] = useState<string>("https://");
  const [password, setPassword] = useState<string>("");
  const [confirmPassword, setConfirmPassword] = useState<string>("");
  const [opened, setOpened] = useState<boolean>(false);
  const [shortLink, setShortLink] = useState<string>("");
  const clipboard = useClipboard();
  const isValidUrl = (urlString: string) => {
    var urlPattern = new RegExp(
      "^(https?:\\/\\/)?" + // validate protocol
        "((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|" + // validate domain name
        "((\\d{1,3}\\.){3}\\d{1,3}))" + // validate OR ip (v4) address
        "(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*" + // validate port and path
        "(\\?[;&a-z\\d%_.~+=-]*)?" + // validate query string
        "(\\#[-a-z\\d_]*)?$",
      "i"
    ); // validate fragment locator
    return !!urlPattern.test(urlString);
  };

  const handleSubmit = () => {
    if (isValidUrl(link)) {
      if (checked) {
        if (password !== confirmPassword) {
          console.log("Passwords do not match");
          return;
        } else {
          generateShortLink();
        }
      } else {
        generateShortLink();
      }
    } else {
      console.log("Invalid URL");
    }
  };

  const generateShortLink = async () => {
    const res = await fetch("/api/link/generate", {
      method: "POST",
      body: JSON.stringify({
        link,
        passwordProtected: checked,
        password,
      }),
    });

    const data = await res.json();

    if (data.message === "Successfull" && res.status === 200) {
      setShortLink(window.location.host + `/link/${data.url}`);
      setOpened(true);
    }
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Center style={{ height: "100vh", width: "100vw" }}>
        <Container style={{ width: "600px", height: "350px" }}>
          <Stack p="xl">
            <h1 className="flex-1 font-semibold flex justify-center items-center">
              Enter the link
            </h1>
            <input
              type="text"
              placeholder="Enter the link"
              className="py-4 px-3 outline-none rounded-md border-2 border-black"
              value={link}
              onChange={(e) => setLink(e.target.value)}
            />
            <div>
              <Switch
                labelPosition="left"
                label="Do you wish to enable password protection ?"
                onChange={(event) => {
                  setPassword("");
                  setConfirmPassword("");

                  toggle(event.target.checked);
                }}
                checked={checked}
                styles={{
                  label: {
                    fontSize: 18,
                    fontWeight: 0,
                  },
                  root: {
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    marginTop: 10,
                  },
                }}
              />

              <div className="flex items-center justify-around space-x-4 mt-4">
                <PasswordInput
                  className="flex-1 "
                  disabled={!checked}
                  label="Password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  placeholder="Password"
                  withAsterisk
                />
                <PasswordInput
                  className="flex-1"
                  label="Confirm Password"
                  disabled={!checked}
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  placeholder="Confirm Password"
                  withAsterisk
                />
              </div>
            </div>
            <Box
              onClick={handleSubmit}
              component="button"
              className="cursor-pointer  bg-black text-white flex items-center justify-center py-2 mx-6 mt-2 px-2 rounded-md font-bold text-xl hover:opacity-80 active:scale-95 transition-all duration-200 ease-out"
            >
              Generate Link
            </Box>
          </Stack>
          <Modal
            opened={opened}
            transitionDuration={300}
            transitionTimingFunction="easeOut"
            centered
            onClose={() => {
              setPassword("");
              setConfirmPassword("");
              setLink("https://");
              toggle(false);
              setOpened(false);
            }}
            title="Successfully Generated Link"
          >
            <div className="flex justify-center items-center space-x-6">
              <a
                target={"_blank"}
                href={`http://${shortLink}`}
                rel="noreferrer"
                className="flex-1 bg-gray-100 p-2 rounded-md cursor-pointer"
              >
                {shortLink}
              </a>
              <CopyButton value={shortLink}>
                {({ copied, copy }) => (
                  <ClipboardDocumentCheckIcon
                    className="h-6 w-6 cursor-pointer"
                    onClick={copy}
                  />
                )}
              </CopyButton>
            </div>
          </Modal>
        </Container>
      </Center>
    </div>
  );
};

export default LinkPage;
